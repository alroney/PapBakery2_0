import React from 'react';
import './CSS/LoginSignup.css';
import { useState } from 'react';
import { apiUrl } from '@config';
import { useUser } from '../Context/UserContext';

export const LoginSignup = () => {
  console.log("==(LoginSignup.jsx) Page Loaded.==");

  const { currentUser, setCurrentUser } = useUser();
  const [error, setError] = useState('');
  const [state, setState] = useState("Login");
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    email: "",
  })

  const userAPIUrl = `${apiUrl}/users`


  const login = async () => {
    try {
        const response = await fetch(`${userAPIUrl}/login`, {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData), //Convert the JSON formated formData into a string.
        });
        const data = await response.json();

        if(data.success) {
          localStorage.setItem('auth-token', data.token); //Store the token.
          setCurrentUser(data.user)
          setError("")
          window.location.replace("/"); //Send the user to home page.
        }
        else {
          setError(data.message);
        }
    }
    catch(error) {
      console.error("Error was caught in login.");
    }
    
  }

  const signup = async () => {
    try {
        const response = await fetch(`${userAPIUrl}/signup`, {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
        });

        const data = await response.json();
    
        if(data.success) {
          localStorage.setItem('auth-token', data.token);
          setCurrentUser(data.user);
          window.location.replace("/"); //Send the user to home page.
        }
        else {
          setError(data.message);
        }
    } 
    catch (error) {
      console.log("Error was caught in signup.");
    }
    
  }

/** Explanation of changeHandler function.
 * @function changeHandler
 * Handles changes to input fields by updating the corresponding state in `formData`.
 *
 * @param {Object} e - The event object generated by the input field change.
 * 
 * @description
 * - This function is called whenever the user interacts with an input field (e.g., typing in a text box).
 * - It uses the `setFormData` function to update the `formData` state.
 *   - `setFormData({...formData, [e.target.name]: e.target.value})`:
 *     - `...formData` spreads the current `formData` object, maintaining all existing key-value pairs.
 *     - `[e.target.name]: e.target.value` dynamically updates the specific field that triggered the event (`e.target.name`) with the new value (`e.target.value`).
 * 
 * @example
 * - If the `name` attribute of the input field is `"email"` and the value typed is `"user@example.com"`,
 *   `setFormData` will update the `formData` object to include `{ email: "user@example.com" }`.
 */
  const changeHandler = (e) => {
    setFormData({...formData, [e.target.name]:e.target.value});
  }


  return (
    <div className="loginsignup">
      <div className="loginsignup-container">
        <h1>{state}</h1> {/* Text changes depending on the value of the state variable */}
        { error && <p className='loginsignup-error'>{error}</p> }

        <div className="loginsignup-fields">
          {state === "Sign Up"?<input name="name" value={formData.name} onChange={changeHandler} type="text" placeholder='Your Name'/> : <></>} {/*If state value is "Sign Up" then show the input field for your name : ELSE hide the input field and place empty tag <></> */}
          <input name="email" value={formData.email} onChange={changeHandler} type="email" placeholder='email@mail.com'/>
          <input name="password" value={formData.password} onChange={changeHandler} type="password" placeholder='Password'/>
        </div>

        <button onClick={() => {state === "Login"?login():signup()}}>{state}</button> {/* This is the SUBMIT button */}

        {/* Change the <p> option depending on the value of state*/}
        {state === "Sign Up"
          ? <p className="loginsignup-login">Already have an account? <span onClick={() => {setState("Login"); setError("")}}>Login Here</span></p> //If True
          : <p className="loginsignup-login">Creat an Account? <span onClick={() => {setState("Sign Up"); setError("")}}>Click Here</span></p> //If False
        }
        
        {/* <div className="loginsignup-agree">
          <input type="checkbox" name='' id='' />
          <p>By continue, I agree to the terms of use & privacy policy.</p>
        </div> */}
      </div>
    </div>
  )
}
